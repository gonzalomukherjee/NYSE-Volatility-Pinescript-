//@version=5
indicator('B3 Extended Betaflow Stochastics', overlay=true)


i1 = input.int(14, 'K-Len', minval=1, inline = "1", group = "Stochastic Setting")
i2 = input.int(3, 'D-Len', minval=1, inline = "1", group = "Stochastic Setting")
i3 = input.int(5, 'Smoothing', minval=1, inline = "1", group = "Stochastic Setting")
i4 = input.int(80, 'OverBought', minval=1, maxval=99, inline = "1", group = "Signal Setting")
i5 = input.int(20, 'OverSold', minval=1, maxval=99, inline = "1", group = "Signal Setting")


barEn = input.bool(true, '', inline = '1', group = "Signal Bar Color")
obClr = input.color(color.yellow, 'OB Color', inline = '1', group = "Signal Bar Color")
osClr = input.color(color.white, 'OS Color', inline = '1', group = "Signal Bar Color")

lineEn = input.bool(true, '', inline = '1', group = "Signal Bar Color")
ntClr = input.color(color.blue, 'Line Neutral Color', inline = '1', group = "Signal Bar Color")

tfEn1 = input.bool(true, '', inline = "1", group = "Timeframe Setting")
tf1 = input.timeframe('', "Timeframe 1", inline = "1", group = "Timeframe Setting")
tfEn2 = input.bool(true, '', inline = "1", group = "Timeframe Setting")
tf2 = input.timeframe('', "Timeframe 2", inline = "1", group = "Timeframe Setting")

tfEn3 = input.bool(true, '', inline = "2", group = "Timeframe Setting")
tf3 = input.timeframe('', "Timeframe 3", inline = "2", group = "Timeframe Setting")
tfEn4 = input.bool(true, '', inline = "2", group = "Timeframe Setting")
tf4 = input.timeframe('', "Timeframe 4", inline = "2", group = "Timeframe Setting")

tfEn5 = input.bool(true, '', inline = "3", group = "Timeframe Setting")
tf5 = input.timeframe('', "Timeframe 5", inline = "3", group = "Timeframe Setting")
tfEn6 = input.bool(true, '', inline = "3", group = "Timeframe Setting")
tf6 = input.timeframe('', "Timeframe 6", inline = "3", group = "Timeframe Setting")

stoch(int i1, int i2, int i3)=>
    hh = ta.highest(high, i1)
    ll = ta.lowest(low, i1)
    dd = close - ll
    rr = hh - ll
    K = math.round(ta.sma(dd / rr * 100, i3), 2)
    D = math.round(ta.sma(K, i2), 2)
    [K, D]

[K, D] = stoch(i1, i2, i3)

[K1, D1] = request.security(syminfo.tickerid, tf1, stoch(i1, i2, i3))
[K2, D2] = request.security(syminfo.tickerid, tf2, stoch(i1, i2, i3))
[K3, D3] = request.security(syminfo.tickerid, tf3, stoch(i1, i2, i3))
[K4, D4] = request.security(syminfo.tickerid, tf4, stoch(i1, i2, i3))
[K5, D5] = request.security(syminfo.tickerid, tf5, stoch(i1, i2, i3))
[K6, D6] = request.security(syminfo.tickerid, tf6, stoch(i1, i2, i3))



tf1C = tfEn1 ? 1 : 0
tf2C = tfEn2 ? 1 : 0
tf3C = tfEn3 ? 1 : 0
tf4C = tfEn4 ? 1 : 0
tf5C = tfEn5 ? 1 : 0
tf6C = tfEn6 ? 1 : 0

tfCount = tf1C + tf2C + tf3C + tf4C + tf5C + tf6C

ob_1 = tfEn1 ?  K1 >= i4 and D1 >= i4 : true
os_1 = tfEn1 ?  K1 <= i5 and D1 <= i5 : true

ob_2 = tfEn2 ?  K2 >= i4 and D2 >= i4 : true
os_2 = tfEn2 ?  K2 <= i5 and D2 <= i5 : true

ob_3 = tfEn3 ?  K3 >= i4 and D3 >= i4 : true
os_3 = tfEn3 ?  K3 <= i5 and D3 <= i5 : true

ob_4 = tfEn4 ?  K4 >= i4 and D4 >= i4 : true
os_4 = tfEn4 ?  K4 <= i5 and D4 <= i5 : true

ob_5 = tfEn5 ?  K5 >= i4 and D5 >= i4 : true
os_5 = tfEn5 ?  K5 <= i5 and D5 <= i5 : true

ob_6 = tfEn6 ?  K6 >= i4 and D6 >= i4 : true
os_6 = tfEn6 ?  K6 <= i5 and D6 <= i5 : true

obCond = ob_1 and ob_2 and ob_3 and ob_4 and ob_5 and ob_6
osCond = os_1 and os_2 and os_3 and os_4 and os_5 and os_6


if obCond and not obCond[1]
    alert('All '+str.tostring(tfCount)+' Timeframe In Overbought Zone', alert.freq_once_per_bar_close)

if osCond and not osCond[1]
    alert('All '+str.tostring(tfCount)+' Timeframe In OverSold Zone', alert.freq_once_per_bar_close)

barcolor(obCond and barEn ? obClr : osCond and barEn ? osClr : na)


clr1 = ob_1  ? color.red : os_1 ? color.lime : chart.bg_color
clr2 = ob_2  ? color.red : os_2 ? color.lime : chart.bg_color
clr3 = ob_3  ? color.red : os_3 ? color.lime : chart.bg_color
clr4 = ob_4  ? color.red : os_4 ? color.lime : chart.bg_color
clr5 = ob_5  ? color.red : os_5 ? color.lime : chart.bg_color
clr6 = ob_6  ? color.red : os_6 ? color.lime : chart.bg_color


// c1 = K > D ? color.green : color.purple
// c2 = D < i5 ? color.lime : D > i4 ? color.fuchsia : K > D ? color.teal : color.maroon
// p1 = plot(K, '%K', color=c1)
// p2 = plot(D, '%D', color=c1, linewidth=2)
// p3 = plot(i4, 'OVB', color=color.new(color.red, 75), style=plot.style_circles)
// p4 = plot(i5, 'OVS', color=color.new(color.green, 75), style=plot.style_circles)
// p5 = plot(50, color=color.new(color.gray, 85), style=plot.style_circles)
// fill(p1, p2, color=color.new(c2, 30))
// fill(p3, p4, color=color.new(c2, 90))


tf1Str = tf1 == '' ? timeframe.period : tf1
tf2Str = tf2 == '' ? timeframe.period : tf2
tf3Str = tf3 == '' ? timeframe.period : tf3
tf4Str = tf4 == '' ? timeframe.period : tf4
tf5Str = tf5 == '' ? timeframe.period : tf5
tf6Str = tf6 == '' ? timeframe.period : tf6


table[] tables = array.new_table()
array.push(tables, table.new(position = position.top_right, columns = 40, rows = 40, bgcolor = chart.bg_color, frame_color = chart.fg_color, border_color=chart.fg_color, frame_width = 1, border_width = 1))



ttlClr1 = obCond ? color.red : osCond ? color.lime : chart.fg_color
ttlClr2 = obCond ? color.red : osCond ? color.lime : chart.bg_color



lineClr = lineEn and obCond ? obClr : lineEn and osCond ? osClr : ntClr


plot(lineEn ? close : na , "Color Line", color=lineClr, linewidth = 2)


if array.size(tables) > 0
    tbl = array.get(tables, 0)
    table.merge_cells(tbl,start_column = 0, end_column = 3, start_row = 0, end_row = 0)
    string txt1 = ''+ str.tostring("Stochastic") + ''
    table.cell(table_id = tbl, column = 0,  row = 0,   text = txt1, text_color = ttlClr1,  bgcolor = color.new(ttlClr2, 90), text_size = size.small)
    table.cell(table_id = tbl, column = 0,  row = 1,   text = "Timeframe", text_color = ttlClr1,  bgcolor = color.new(ttlClr2, 90), text_size = size.small)
    table.cell(table_id = tbl, column = 1,  row = 1,   text = "K", text_color = ttlClr1,  bgcolor = color.new(ttlClr2, 90), text_size = size.small)
    table.cell(table_id = tbl, column = 2,  row = 1,   text = "D", text_color = ttlClr1,  bgcolor = color.new(ttlClr2, 90), text_size = size.small)
    table.cell(table_id = tbl, column = 3,  row = 1,   text = "Signal", text_color = ttlClr1,  bgcolor = color.new(ttlClr2, 90), text_size = size.small)

    if tfEn1
        table.cell(table_id = tbl, column = 0,  row = 2,   text = str.tostring(tf1Str), text_color = ttlClr1,  bgcolor = color.new(ttlClr2, 90), text_size = size.small)
        table.cell(table_id = tbl, column = 1,  row = 2,   text = str.tostring(  K1  ), text_color = ttlClr1,  bgcolor = color.new(ttlClr2, 90), text_size = size.small)
        table.cell(table_id = tbl, column = 2,  row = 2,   text = str.tostring(  D1  ), text_color = ttlClr1,  bgcolor = color.new(ttlClr2, 90), text_size = size.small)
        table.cell(table_id = tbl, column = 3,  row = 2,   text = str.tostring(  ""  ), text_color = chart.fg_color,  bgcolor =           clr1, text_size = size.small)

    if tfEn2
        table.cell(table_id = tbl, column = 0,  row = 3,   text = str.tostring(tf2Str), text_color = ttlClr1,  bgcolor = color.new(ttlClr2, 90), text_size = size.small)
        table.cell(table_id = tbl, column = 1,  row = 3,   text = str.tostring(  K2  ), text_color = ttlClr1,  bgcolor = color.new(ttlClr2, 90), text_size = size.small)
        table.cell(table_id = tbl, column = 2,  row = 3,   text = str.tostring(  D2  ), text_color = ttlClr1,  bgcolor = color.new(ttlClr2, 90), text_size = size.small)
        table.cell(table_id = tbl, column = 3,  row = 3,   text = str.tostring(  ""  ), text_color = chart.fg_color,  bgcolor =           clr2, text_size = size.small)

    if tfEn3
        table.cell(table_id = tbl, column = 0,  row = 4,   text = str.tostring(tf3Str), text_color = ttlClr1,  bgcolor = color.new(ttlClr2, 90), text_size = size.small)
        table.cell(table_id = tbl, column = 1,  row = 4,   text = str.tostring(  K3  ), text_color = ttlClr1,  bgcolor = color.new(ttlClr2, 90), text_size = size.small)
        table.cell(table_id = tbl, column = 2,  row = 4,   text = str.tostring(  D3  ), text_color = ttlClr1,  bgcolor = color.new(ttlClr2, 90), text_size = size.small)
        table.cell(table_id = tbl, column = 3,  row = 4,   text = str.tostring(  ""  ), text_color = chart.fg_color,  bgcolor =           clr3, text_size = size.small)

    if tfEn4
        table.cell(table_id = tbl, column = 0,  row = 5,   text = str.tostring(tf4Str), text_color = ttlClr1,  bgcolor = color.new(ttlClr2, 90), text_size = size.small)
        table.cell(table_id = tbl, column = 1,  row = 5,   text = str.tostring(  K4  ), text_color = ttlClr1,  bgcolor = color.new(ttlClr2, 90), text_size = size.small)
        table.cell(table_id = tbl, column = 2,  row = 5,   text = str.tostring(  D4  ), text_color = ttlClr1,  bgcolor = color.new(ttlClr2, 90), text_size = size.small)
        table.cell(table_id = tbl, column = 3,  row = 5,   text = str.tostring(  ""  ), text_color = chart.fg_color,  bgcolor =           clr4, text_size = size.small)

    if tfEn5
        table.cell(table_id = tbl, column = 0,  row = 6,   text = str.tostring(tf5Str), text_color = ttlClr1,  bgcolor = color.new(ttlClr2, 90), text_size = size.small)
        table.cell(table_id = tbl, column = 1,  row = 6,   text = str.tostring(  K5  ), text_color = ttlClr1,  bgcolor = color.new(ttlClr2, 90), text_size = size.small)
        table.cell(table_id = tbl, column = 2,  row = 6,   text = str.tostring(  D5  ), text_color = ttlClr1,  bgcolor = color.new(ttlClr2, 90), text_size = size.small)
        table.cell(table_id = tbl, column = 3,  row = 6,   text = str.tostring(  ""  ), text_color = chart.fg_color,  bgcolor =           clr5, text_size = size.small)

    if tfEn6
        table.cell(table_id = tbl, column = 0,  row = 7,   text = str.tostring(tf6Str), text_color = ttlClr1,  bgcolor = color.new(ttlClr2, 90), text_size = size.small)
        table.cell(table_id = tbl, column = 1,  row = 7,   text = str.tostring(  K6  ), text_color = ttlClr1,  bgcolor = color.new(ttlClr2, 90), text_size = size.small)
        table.cell(table_id = tbl, column = 2,  row = 7,   text = str.tostring(  D6  ), text_color = ttlClr1,  bgcolor = color.new(ttlClr2, 90), text_size = size.small)
        table.cell(table_id = tbl, column = 3,  row = 7,   text = str.tostring(  ""  ), text_color = chart.fg_color,  bgcolor =           clr6, text_size = size.small)
